// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RECONSTRUCTION_FINISHED.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V4D.Reconstruction {

  /// <summary>Holder for reflection information generated from RECONSTRUCTION_FINISHED.proto</summary>
  public static partial class RECONSTRUCTIONFINISHEDReflection {

    #region Descriptor
    /// <summary>File descriptor for RECONSTRUCTION_FINISHED.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RECONSTRUCTIONFINISHEDReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1SRUNPTlNUUlVDVElPTl9GSU5JU0hFRC5wcm90bxISdjRkLnJlY29uc3Ry",
            "dWN0aW9uIh8KC0NvbnRlbnRJbmZvEhAKCHNvdXJjZUlkGAEgASgJIhIKBFVV",
            "SUQSCgoCaWQYASABKAkiiwIKCE1lc2hJbmZvEigKBm1lc2hJZBgBIAEoCzIY",
            "LnY0ZC5yZWNvbnN0cnVjdGlvbi5VVUlEEjcKBmZvcm1hdBgCIAEoDjInLnY0",
            "ZC5yZWNvbnN0cnVjdGlvbi5NZXNoSW5mby5NZXNoRm9ybWF0EhEKCWZhY2VD",
            "b3VudBgDIAEoDRIUCgx0ZXh0dXJlQ291bnQYBCABKA0SMgoQcmVjb25zdHJ1",
            "Y3Rpb25JZBgFIAEoCzIYLnY0ZC5yZWNvbnN0cnVjdGlvbi5VVUlEIj8KCk1l",
            "c2hGb3JtYXQSCQoFT1RIRVIQABIHCgNPQkoQARIOCgpQTFlfQklOQVJZEAIS",
            "DQoJUExZX0FTQ0lJEAMijAIKElJlY29uc3RydWN0aW9uSW5mbxIyChByZWNv",
            "bnN0cnVjdGlvbklkGAEgASgLMhgudjRkLnJlY29uc3RydWN0aW9uLlVVSUQS",
            "NwoVcmVjb25zdHJ1Y3Rpb25Hcm91cElkGAIgASgLMhgudjRkLnJlY29uc3Ry",
            "dWN0aW9uLlVVSUQSNQoMaW5wdXRDb250ZW50GAMgAygLMh8udjRkLnJlY29u",
            "c3RydWN0aW9uLkNvbnRlbnRJbmZvEjQKC3VzZWRDb250ZW50GAQgAygLMh8u",
            "djRkLnJlY29uc3RydWN0aW9uLkNvbnRlbnRJbmZvEhwKFHZpc3VhbF9hbmFs",
            "eXNpc190YWdzGAUgAygJImkKJlNpbXVsYXRpb25FeGFtcGxlMl9yZWNvbnN0",
            "cnVjdGlvbmZvdW5kEj8KD3JlY29uc3RydWN0aW9ucxgBIAMoCzImLnY0ZC5y",
            "ZWNvbnN0cnVjdGlvbi5SZWNvbnN0cnVjdGlvbkluZm8ifgoqU2ltdWxhdGlv",
            "bkV4YW1wbGUyX3JlY29uc3RydWN0aW9uVGFnVXBkYXRlEjIKEHJlY29uc3Ry",
            "dWN0aW9uSWQYASABKAsyGC52NGQucmVjb25zdHJ1Y3Rpb24uVVVJRBIcChR2",
            "aXN1YWxfYW5hbHlzaXNfdGFncxgCIAMoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V4D.Reconstruction.ContentInfo), global::V4D.Reconstruction.ContentInfo.Parser, new[]{ "SourceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V4D.Reconstruction.UUID), global::V4D.Reconstruction.UUID.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V4D.Reconstruction.MeshInfo), global::V4D.Reconstruction.MeshInfo.Parser, new[]{ "MeshId", "Format", "FaceCount", "TextureCount", "ReconstructionId" }, null, new[]{ typeof(global::V4D.Reconstruction.MeshInfo.Types.MeshFormat) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V4D.Reconstruction.ReconstructionInfo), global::V4D.Reconstruction.ReconstructionInfo.Parser, new[]{ "ReconstructionId", "ReconstructionGroupId", "InputContent", "UsedContent", "VisualAnalysisTags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V4D.Reconstruction.SimulationExample2_reconstructionfound), global::V4D.Reconstruction.SimulationExample2_reconstructionfound.Parser, new[]{ "Reconstructions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V4D.Reconstruction.SimulationExample2_reconstructionTagUpdate), global::V4D.Reconstruction.SimulationExample2_reconstructionTagUpdate.Parser, new[]{ "ReconstructionId", "VisualAnalysisTags" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///TBD
  /// </summary>
  public sealed partial class ContentInfo : pb::IMessage<ContentInfo> {
    private static readonly pb::MessageParser<ContentInfo> _parser = new pb::MessageParser<ContentInfo>(() => new ContentInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V4D.Reconstruction.RECONSTRUCTIONFINISHEDReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentInfo(ContentInfo other) : this() {
      sourceId_ = other.sourceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentInfo Clone() {
      return new ContentInfo(this);
    }

    /// <summary>Field number for the "sourceId" field.</summary>
    public const int SourceIdFieldNumber = 1;
    private string sourceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceId {
      get { return sourceId_; }
      set {
        sourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceId != other.SourceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceId.Length != 0) hash ^= SourceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SourceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentInfo other) {
      if (other == null) {
        return;
      }
      if (other.SourceId.Length != 0) {
        SourceId = other.SourceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SourceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///TBD
  /// </summary>
  public sealed partial class UUID : pb::IMessage<UUID> {
    private static readonly pb::MessageParser<UUID> _parser = new pb::MessageParser<UUID>(() => new UUID());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UUID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V4D.Reconstruction.RECONSTRUCTIONFINISHEDReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID(UUID other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUID Clone() {
      return new UUID(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UUID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UUID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UUID other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MeshInfo : pb::IMessage<MeshInfo> {
    private static readonly pb::MessageParser<MeshInfo> _parser = new pb::MessageParser<MeshInfo>(() => new MeshInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeshInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V4D.Reconstruction.RECONSTRUCTIONFINISHEDReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshInfo(MeshInfo other) : this() {
      meshId_ = other.meshId_ != null ? other.meshId_.Clone() : null;
      format_ = other.format_;
      faceCount_ = other.faceCount_;
      textureCount_ = other.textureCount_;
      reconstructionId_ = other.reconstructionId_ != null ? other.reconstructionId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshInfo Clone() {
      return new MeshInfo(this);
    }

    /// <summary>Field number for the "meshId" field.</summary>
    public const int MeshIdFieldNumber = 1;
    private global::V4D.Reconstruction.UUID meshId_;
    /// <summary>
    ///reserved 1;
    ///unique meshid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V4D.Reconstruction.UUID MeshId {
      get { return meshId_; }
      set {
        meshId_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private global::V4D.Reconstruction.MeshInfo.Types.MeshFormat format_ = 0;
    /// <summary>
    ///format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V4D.Reconstruction.MeshInfo.Types.MeshFormat Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "faceCount" field.</summary>
    public const int FaceCountFieldNumber = 3;
    private uint faceCount_;
    /// <summary>
    ///mesh specs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FaceCount {
      get { return faceCount_; }
      set {
        faceCount_ = value;
      }
    }

    /// <summary>Field number for the "textureCount" field.</summary>
    public const int TextureCountFieldNumber = 4;
    private uint textureCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TextureCount {
      get { return textureCount_; }
      set {
        textureCount_ = value;
      }
    }

    /// <summary>Field number for the "reconstructionId" field.</summary>
    public const int ReconstructionIdFieldNumber = 5;
    private global::V4D.Reconstruction.UUID reconstructionId_;
    /// <summary>
    ///parent reconstruction id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V4D.Reconstruction.UUID ReconstructionId {
      get { return reconstructionId_; }
      set {
        reconstructionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeshInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeshInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MeshId, other.MeshId)) return false;
      if (Format != other.Format) return false;
      if (FaceCount != other.FaceCount) return false;
      if (TextureCount != other.TextureCount) return false;
      if (!object.Equals(ReconstructionId, other.ReconstructionId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (meshId_ != null) hash ^= MeshId.GetHashCode();
      if (Format != 0) hash ^= Format.GetHashCode();
      if (FaceCount != 0) hash ^= FaceCount.GetHashCode();
      if (TextureCount != 0) hash ^= TextureCount.GetHashCode();
      if (reconstructionId_ != null) hash ^= ReconstructionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (meshId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MeshId);
      }
      if (Format != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Format);
      }
      if (FaceCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FaceCount);
      }
      if (TextureCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TextureCount);
      }
      if (reconstructionId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ReconstructionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (meshId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeshId);
      }
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (FaceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FaceCount);
      }
      if (TextureCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TextureCount);
      }
      if (reconstructionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReconstructionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeshInfo other) {
      if (other == null) {
        return;
      }
      if (other.meshId_ != null) {
        if (meshId_ == null) {
          meshId_ = new global::V4D.Reconstruction.UUID();
        }
        MeshId.MergeFrom(other.MeshId);
      }
      if (other.Format != 0) {
        Format = other.Format;
      }
      if (other.FaceCount != 0) {
        FaceCount = other.FaceCount;
      }
      if (other.TextureCount != 0) {
        TextureCount = other.TextureCount;
      }
      if (other.reconstructionId_ != null) {
        if (reconstructionId_ == null) {
          reconstructionId_ = new global::V4D.Reconstruction.UUID();
        }
        ReconstructionId.MergeFrom(other.ReconstructionId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (meshId_ == null) {
              meshId_ = new global::V4D.Reconstruction.UUID();
            }
            input.ReadMessage(meshId_);
            break;
          }
          case 16: {
            format_ = (global::V4D.Reconstruction.MeshInfo.Types.MeshFormat) input.ReadEnum();
            break;
          }
          case 24: {
            FaceCount = input.ReadUInt32();
            break;
          }
          case 32: {
            TextureCount = input.ReadUInt32();
            break;
          }
          case 42: {
            if (reconstructionId_ == null) {
              reconstructionId_ = new global::V4D.Reconstruction.UUID();
            }
            input.ReadMessage(reconstructionId_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MeshInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MeshFormat {
        [pbr::OriginalName("OTHER")] Other = 0,
        [pbr::OriginalName("OBJ")] Obj = 1,
        [pbr::OriginalName("PLY_BINARY")] PlyBinary = 2,
        [pbr::OriginalName("PLY_ASCII")] PlyAscii = 3,
      }

    }
    #endregion

  }

  public sealed partial class ReconstructionInfo : pb::IMessage<ReconstructionInfo> {
    private static readonly pb::MessageParser<ReconstructionInfo> _parser = new pb::MessageParser<ReconstructionInfo>(() => new ReconstructionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReconstructionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V4D.Reconstruction.RECONSTRUCTIONFINISHEDReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconstructionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconstructionInfo(ReconstructionInfo other) : this() {
      reconstructionId_ = other.reconstructionId_ != null ? other.reconstructionId_.Clone() : null;
      reconstructionGroupId_ = other.reconstructionGroupId_ != null ? other.reconstructionGroupId_.Clone() : null;
      inputContent_ = other.inputContent_.Clone();
      usedContent_ = other.usedContent_.Clone();
      visualAnalysisTags_ = other.visualAnalysisTags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconstructionInfo Clone() {
      return new ReconstructionInfo(this);
    }

    /// <summary>Field number for the "reconstructionId" field.</summary>
    public const int ReconstructionIdFieldNumber = 1;
    private global::V4D.Reconstruction.UUID reconstructionId_;
    /// <summary>
    ///unique reconstruction id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V4D.Reconstruction.UUID ReconstructionId {
      get { return reconstructionId_; }
      set {
        reconstructionId_ = value;
      }
    }

    /// <summary>Field number for the "reconstructionGroupId" field.</summary>
    public const int ReconstructionGroupIdFieldNumber = 2;
    private global::V4D.Reconstruction.UUID reconstructionGroupId_;
    /// <summary>
    ///group id, equal group ids in reconstructions = same scale
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V4D.Reconstruction.UUID ReconstructionGroupId {
      get { return reconstructionGroupId_; }
      set {
        reconstructionGroupId_ = value;
      }
    }

    /// <summary>Field number for the "inputContent" field.</summary>
    public const int InputContentFieldNumber = 3;
    private static readonly pb::FieldCodec<global::V4D.Reconstruction.ContentInfo> _repeated_inputContent_codec
        = pb::FieldCodec.ForMessage(26, global::V4D.Reconstruction.ContentInfo.Parser);
    private readonly pbc::RepeatedField<global::V4D.Reconstruction.ContentInfo> inputContent_ = new pbc::RepeatedField<global::V4D.Reconstruction.ContentInfo>();
    /// <summary>
    ///all input content
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V4D.Reconstruction.ContentInfo> InputContent {
      get { return inputContent_; }
    }

    /// <summary>Field number for the "usedContent" field.</summary>
    public const int UsedContentFieldNumber = 4;
    private static readonly pb::FieldCodec<global::V4D.Reconstruction.ContentInfo> _repeated_usedContent_codec
        = pb::FieldCodec.ForMessage(34, global::V4D.Reconstruction.ContentInfo.Parser);
    private readonly pbc::RepeatedField<global::V4D.Reconstruction.ContentInfo> usedContent_ = new pbc::RepeatedField<global::V4D.Reconstruction.ContentInfo>();
    /// <summary>
    ///used content, eg. matched
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V4D.Reconstruction.ContentInfo> UsedContent {
      get { return usedContent_; }
    }

    /// <summary>Field number for the "visual_analysis_tags" field.</summary>
    public const int VisualAnalysisTagsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_visualAnalysisTags_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> visualAnalysisTags_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///visual AnalysisMask collisions, eg "tower" "trees" "statue" "building" "window" etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> VisualAnalysisTags {
      get { return visualAnalysisTags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReconstructionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReconstructionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReconstructionId, other.ReconstructionId)) return false;
      if (!object.Equals(ReconstructionGroupId, other.ReconstructionGroupId)) return false;
      if(!inputContent_.Equals(other.inputContent_)) return false;
      if(!usedContent_.Equals(other.usedContent_)) return false;
      if(!visualAnalysisTags_.Equals(other.visualAnalysisTags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reconstructionId_ != null) hash ^= ReconstructionId.GetHashCode();
      if (reconstructionGroupId_ != null) hash ^= ReconstructionGroupId.GetHashCode();
      hash ^= inputContent_.GetHashCode();
      hash ^= usedContent_.GetHashCode();
      hash ^= visualAnalysisTags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reconstructionId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReconstructionId);
      }
      if (reconstructionGroupId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReconstructionGroupId);
      }
      inputContent_.WriteTo(output, _repeated_inputContent_codec);
      usedContent_.WriteTo(output, _repeated_usedContent_codec);
      visualAnalysisTags_.WriteTo(output, _repeated_visualAnalysisTags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reconstructionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReconstructionId);
      }
      if (reconstructionGroupId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReconstructionGroupId);
      }
      size += inputContent_.CalculateSize(_repeated_inputContent_codec);
      size += usedContent_.CalculateSize(_repeated_usedContent_codec);
      size += visualAnalysisTags_.CalculateSize(_repeated_visualAnalysisTags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReconstructionInfo other) {
      if (other == null) {
        return;
      }
      if (other.reconstructionId_ != null) {
        if (reconstructionId_ == null) {
          reconstructionId_ = new global::V4D.Reconstruction.UUID();
        }
        ReconstructionId.MergeFrom(other.ReconstructionId);
      }
      if (other.reconstructionGroupId_ != null) {
        if (reconstructionGroupId_ == null) {
          reconstructionGroupId_ = new global::V4D.Reconstruction.UUID();
        }
        ReconstructionGroupId.MergeFrom(other.ReconstructionGroupId);
      }
      inputContent_.Add(other.inputContent_);
      usedContent_.Add(other.usedContent_);
      visualAnalysisTags_.Add(other.visualAnalysisTags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (reconstructionId_ == null) {
              reconstructionId_ = new global::V4D.Reconstruction.UUID();
            }
            input.ReadMessage(reconstructionId_);
            break;
          }
          case 18: {
            if (reconstructionGroupId_ == null) {
              reconstructionGroupId_ = new global::V4D.Reconstruction.UUID();
            }
            input.ReadMessage(reconstructionGroupId_);
            break;
          }
          case 26: {
            inputContent_.AddEntriesFrom(input, _repeated_inputContent_codec);
            break;
          }
          case 34: {
            usedContent_.AddEntriesFrom(input, _repeated_usedContent_codec);
            break;
          }
          case 42: {
            visualAnalysisTags_.AddEntriesFrom(input, _repeated_visualAnalysisTags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimulationExample2_reconstructionfound : pb::IMessage<SimulationExample2_reconstructionfound> {
    private static readonly pb::MessageParser<SimulationExample2_reconstructionfound> _parser = new pb::MessageParser<SimulationExample2_reconstructionfound>(() => new SimulationExample2_reconstructionfound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationExample2_reconstructionfound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V4D.Reconstruction.RECONSTRUCTIONFINISHEDReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationExample2_reconstructionfound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationExample2_reconstructionfound(SimulationExample2_reconstructionfound other) : this() {
      reconstructions_ = other.reconstructions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationExample2_reconstructionfound Clone() {
      return new SimulationExample2_reconstructionfound(this);
    }

    /// <summary>Field number for the "reconstructions" field.</summary>
    public const int ReconstructionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::V4D.Reconstruction.ReconstructionInfo> _repeated_reconstructions_codec
        = pb::FieldCodec.ForMessage(10, global::V4D.Reconstruction.ReconstructionInfo.Parser);
    private readonly pbc::RepeatedField<global::V4D.Reconstruction.ReconstructionInfo> reconstructions_ = new pbc::RepeatedField<global::V4D.Reconstruction.ReconstructionInfo>();
    /// <summary>
    /// array of reconstrutions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V4D.Reconstruction.ReconstructionInfo> Reconstructions {
      get { return reconstructions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationExample2_reconstructionfound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationExample2_reconstructionfound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reconstructions_.Equals(other.reconstructions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reconstructions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reconstructions_.WriteTo(output, _repeated_reconstructions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reconstructions_.CalculateSize(_repeated_reconstructions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationExample2_reconstructionfound other) {
      if (other == null) {
        return;
      }
      reconstructions_.Add(other.reconstructions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            reconstructions_.AddEntriesFrom(input, _repeated_reconstructions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimulationExample2_reconstructionTagUpdate : pb::IMessage<SimulationExample2_reconstructionTagUpdate> {
    private static readonly pb::MessageParser<SimulationExample2_reconstructionTagUpdate> _parser = new pb::MessageParser<SimulationExample2_reconstructionTagUpdate>(() => new SimulationExample2_reconstructionTagUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationExample2_reconstructionTagUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V4D.Reconstruction.RECONSTRUCTIONFINISHEDReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationExample2_reconstructionTagUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationExample2_reconstructionTagUpdate(SimulationExample2_reconstructionTagUpdate other) : this() {
      reconstructionId_ = other.reconstructionId_ != null ? other.reconstructionId_.Clone() : null;
      visualAnalysisTags_ = other.visualAnalysisTags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationExample2_reconstructionTagUpdate Clone() {
      return new SimulationExample2_reconstructionTagUpdate(this);
    }

    /// <summary>Field number for the "reconstructionId" field.</summary>
    public const int ReconstructionIdFieldNumber = 1;
    private global::V4D.Reconstruction.UUID reconstructionId_;
    /// <summary>
    /// unique reconstruction id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V4D.Reconstruction.UUID ReconstructionId {
      get { return reconstructionId_; }
      set {
        reconstructionId_ = value;
      }
    }

    /// <summary>Field number for the "visual_analysis_tags" field.</summary>
    public const int VisualAnalysisTagsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_visualAnalysisTags_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> visualAnalysisTags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// new list of all tags²
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> VisualAnalysisTags {
      get { return visualAnalysisTags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationExample2_reconstructionTagUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationExample2_reconstructionTagUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReconstructionId, other.ReconstructionId)) return false;
      if(!visualAnalysisTags_.Equals(other.visualAnalysisTags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reconstructionId_ != null) hash ^= ReconstructionId.GetHashCode();
      hash ^= visualAnalysisTags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reconstructionId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReconstructionId);
      }
      visualAnalysisTags_.WriteTo(output, _repeated_visualAnalysisTags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reconstructionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReconstructionId);
      }
      size += visualAnalysisTags_.CalculateSize(_repeated_visualAnalysisTags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationExample2_reconstructionTagUpdate other) {
      if (other == null) {
        return;
      }
      if (other.reconstructionId_ != null) {
        if (reconstructionId_ == null) {
          reconstructionId_ = new global::V4D.Reconstruction.UUID();
        }
        ReconstructionId.MergeFrom(other.ReconstructionId);
      }
      visualAnalysisTags_.Add(other.visualAnalysisTags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (reconstructionId_ == null) {
              reconstructionId_ = new global::V4D.Reconstruction.UUID();
            }
            input.ReadMessage(reconstructionId_);
            break;
          }
          case 18: {
            visualAnalysisTags_.AddEntriesFrom(input, _repeated_visualAnalysisTags_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
